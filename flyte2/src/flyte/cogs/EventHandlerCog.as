package flyte.cogs{	import flash.events.Event;		import flyte.core.Base;	import flyte.core.flWorld;	import flyte.events.GameEvent;	public class EventHandlerCog extends BaseCog	{		private var loopQueue:Array		public var enabled:Boolean = true		public function EventHandlerCog(obj:Base)		{			loopQueue = []			this._target = obj		}				public function ready():void		{			target.world.addEventListener(GameEvent.LOOP,function(e:GameEvent):void			{				if(!enabled) return				for each(var f:Function in loopQueue)				{					f.call(target,e)				}			})		}				public function onReadyDo(f:Function):void		{			target.addEventListener(Event.ADDED_TO_STAGE,function(e:Event):void			{				f.call()			})		}				public function when(...args):void		{			if(enabled)			{				if(args[0] is Array)				{					for(var i:uint=0;i<args[0].length;i++)					{						this.addEventListener.apply(this,[args[0][i]].concat(args.slice(1)))					}				} else {					this.addEventListener.apply(this,args)				}			}		}				public function fire(...args):void		{			if(enabled)			{				this.dispatchEvent.apply(this,args)			}		}				public function enable():void		{			enabled = true		}				public function disable():void		{			enabled = false		}				public function onLoopDo(f:Function):void		{			loopQueue.push(f)		}				public function onLoopDont(f:Function):void		{			var i:int = loopQueue.indexOf(f)			if(i == -1) return			loopQueue = loopQueue.slice(0,i).concat(loopQueue.slice(i+1))		}			}}