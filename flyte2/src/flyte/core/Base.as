package flyte.core{	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;		import flyte.*;	import flyte.cogs.AnimationCog;	import flyte.cogs.DefaultsCog;	import flyte.cogs.DisplacementCog;	import flyte.cogs.EventHandlerCog;	import flyte.cogs.SensorCog;		public class Base extends flash.display.MovieClip	{		private var _world:flWorld		private var _listen:EventHandlerCog		private var _displace:DisplacementCog		private var _sensors:SensorCog		private var _animation:AnimationCog		private var _defaults:DefaultsCog				public var id:String = null				public var bounds:Point		public function get displacement():DisplacementCog		{			return _displace		}				public function get game():flyte.Game		{			return _world._game		}				public function get world():flWorld		{			return _world		}				public function get event():EventHandlerCog		{			return _listen		}				public function get sensors():SensorCog		{			return _sensors		}				public function get animation():AnimationCog		{			return _animation		}				public function get defaults():DefaultsCog		{			return _defaults		}				public function Base(){			_sensors = new SensorCog(this)			_listen = new EventHandlerCog(this)			_displace = new DisplacementCog(this)			_animation = new AnimationCog(this)			_defaults = new DefaultsCog(this)			this.addEventListener(Event.ADDED_TO_STAGE,_detectWorld)			init()		}				public function init():void		{			var r:Rectangle = this.getBounds(this)			bounds = new Point(r.width,r.height)		}				public function getBoundsBox(d:DisplayObject):Rectangle		{			return this.getBounds(d)		}				public function parentThatIsA(c:Class):DisplayObject		{			var theParent:DisplayObject = this.parent			while(theParent != null)			{				if(theParent is c)				{					return theParent				}else{					theParent = theParent.parent				}			}			return null		}				private function _detectWorld(e:Event):void		{			_world = detectWorld()			_world.all.register(this)			event.ready()		}				private function detectWorld():flWorld		{			var d:DisplayObject = this			while(!(d is flWorld || d == null)){				d = d.parent			}			return flWorld(d)		}				public function remove():void		{			_world.all.unregister(this)			parent.removeChild(this)		}				protected function get self():Base		{			return this		}				public function d2r(n:Number):Number		{			return n * (Math.PI/180) 		}				public function r2d(n:Number):Number		{			return n * (180/Math.PI)		}								}}